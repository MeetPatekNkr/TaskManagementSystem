@model TaskManager.ViewModels.TaskDetailViewModel
@{
    ViewData["Title"] = "Task Details";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="fas fa-tasks me-2"></i>@Model.Title</h1>
    <div>
        <a asp-action="Index" asp-route-projectId="@Model.ProjectId" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-1"></i>Back to Tasks
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <!-- Task Details -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">Task Information</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <h6>Description</h6>
                    <p class="card-text">@Model.Description</p>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <h6>Details</h6>
                        <ul class="list-unstyled">
                            <li class="mb-2">
                                <i class="fas fa-flag me-2 text-@GetPriorityColor(Model.Priority)"></i>
                                <strong>Priority:</strong> 
                                <span class="badge bg-@GetPriorityColor(Model.Priority)">@Model.Priority</span>
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-tasks me-2 text-primary"></i>
                                <strong>Status:</strong> 
                                <span class="badge bg-@GetStatusColor(Model.Status)">@Model.Status</span>
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-user me-2 text-info"></i>
                                <strong>Assigned to:</strong> @Model.AssignedToName
                            </li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>Timeline</h6>
                        <ul class="list-unstyled">
                            <li class="mb-2">
                                <i class="fas fa-calendar-plus me-2 text-success"></i>
                                <strong>Created:</strong> @Model.CreatedAt.ToString("MMM dd, yyyy")
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-calendar-day me-2 text-warning"></i>
                                <strong>Due Date:</strong> 
                                @if (Model.DueDate.HasValue)
                                {
                                    <span class="@(Model.DueDate.Value < DateTime.Now ? "text-danger" : "")">
                                        @Model.DueDate.Value.ToString("MMM dd, yyyy")
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">Not set</span>
                                }
                            </li>
                            <li class="mb-2">
                                <i class="fas fa-user-edit me-2 text-primary"></i>
                                <strong>Created by:</strong> @Model.CreatedByName
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Comments Section -->
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Comments</h5>
            </div>
            <div class="card-body">
                @if (Model.Comments.Any())
                {
                    <div class="comments-section">
                        @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                        {
                            <div class="comment mb-3 pb-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <div>
                                        <strong>@comment.UserName</strong>
                                        <small class="text-muted ms-2">@comment.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                    </div>
                                </div>
                                <p class="mb-0">@comment.Content</p>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted text-center">No comments yet. Be the first to comment!</p>
                }

                <!-- Add Comment Form -->
                <div class="add-comment mt-4">
                    <form id="addCommentForm">
                        <div class="mb-3">
                            <label for="commentContent" class="form-label">Add Comment</label>
                            <textarea class="form-control" id="commentContent" rows="3" placeholder="Write your comment..." required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-paper-plane me-1"></i>Post Comment
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <!-- Quick Actions -->
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <!-- Status Update -->
                    <div class="mb-3">
                        <label class="form-label">Update Status</label>
                        <select class="form-select status-select" id="taskStatus">
                            <option value="ToDo" selected="@(Model.Status == TaskItemStatus.ToDo)">To Do</option>
                            <option value="InProgress" selected="@(Model.Status == TaskItemStatus.InProgress)">In Progress</option>
                            <option value="Review" selected="@(Model.Status == TaskItemStatus.Review)">Review</option>
                            <option value="Done" selected="@(Model.Status == TaskItemStatus.Done)">Done</option>
                        </select>
                    </div>

                    <!-- Project Info -->
                    <div class="mb-3">
                        <h6>Project</h6>
                        <p class="mb-1">
                            <a asp-controller="Projects" asp-action="Details" asp-route-id="@Model.ProjectId" class="text-decoration-none">
                                <i class="fas fa-project-diagram me-1"></i>@Model.ProjectName
                            </a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Status update
            $('#taskStatus').change(function () {
                const newStatus = $(this).val();

                $.post('@Url.Action("UpdateStatus", "Tasks")', {
                    id: @Model.Id,
                    status: newStatus
                })
                .done(function (response) {
                    if (response.success) {
                        location.reload(); // Refresh to show updated status
                    } else {
                        alert('Error: ' + response.message);
                    location.reload();
                    }
                })
                .fail(function () {
                    alert('Error updating status. Please try again.');
                    location.reload();
                });
            });

            // Add comment
            $('#addCommentForm').on('submit', function (e) {
                e.preventDefault();
                
                const content = $('#commentContent').val().trim();

                if (!content) {
                    alert('Please enter a comment');
                    return;
                }

                // For now, just show a message since we don't have comment controller
                alert('Comment functionality will be implemented in the next phase!');
                $('#commentContent').val('');
            });
        });
    </script>
}

@functions {
    public string GetPriorityColor(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Low => "success",
            TaskPriority.Medium => "info",
            TaskPriority.High => "warning",
            TaskPriority.Critical => "danger",
            _ => "secondary"
        };
    }

    public string GetStatusColor(TaskItemStatus status)
    {
        return status switch
        {
            TaskItemStatus.ToDo => "secondary",
            TaskItemStatus.InProgress => "warning",
            TaskItemStatus.Review => "info",
            TaskItemStatus.Done => "success",
            _ => "secondary"
        };
    }
}